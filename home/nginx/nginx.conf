worker_processes 1;

events {
    worker_connections 1024;
}

# preserve env vars
env OPS_DEFAULT_BACKEND;
env OPS_DEFAULT_DOCROOT;
env OPS_DOMAIN_ALIASES;
env OPS_DOMAIN;

http {
    include mime.types;
    default_type application/octet-stream;

    client_max_body_size 100M;
    keepalive_timeout 65;
    sendfile on;
    gzip on;

    # set docker DNS resolver
    resolver 127.0.0.11 valid=10s;

    # set cache path
    #proxy_cache_path /var/www/cache levels=1:2 keys_zone=cache:10m inactive=60m max_size=10g use_temp_path=off;
    #proxy_cache_key "$request_method$host$request_uri";

    server {
        location / {
            set $ops_project_name '';
            set $ops_project_backend '';
            set $ops_project_docroot '';
            set $ops_project_basic_auth 'off';
            set $ops_project_basic_auth_file '';

            rewrite_by_lua_block {
                function is_file(path)
                    return os.execute(('[ -f "%s" ]'):format(path)) or false
                end

                function is_dir(path)
                    return os.execute(('[ -d "%s" ]'):format(path)) or false
                end

                function dotenv(path, env)
                    local env = {}

                    if is_file(path) then
                        for line in io.lines(path) do
                            local key, value = string.match(line, '^([^#][^=]+)=[\'"]?([^\'"]*)')
                            if key then env[key] = value end
                        end
                    end

                    return env
                end

                -- set defaults
                ngx.var.ops_project_backend = os.getenv('OPS_DEFAULT_BACKEND')
                ngx.var.ops_project_docroot = os.getenv('OPS_DEFAULT_DOCROOT')

                local aliases = os.getenv('OPS_DOMAIN_ALIASES')

                if aliases == nil then
                    aliases = ''
                end

                local name = ''
                local full = ''

                local ops_domain = os.getenv('OPS_DOMAIN')

                -- get host and remove port
                local host = ngx.req.get_headers()["Host"]:gsub(':[0-9]+$', '')

                -- look up domain aliases
                for k,v in string.gmatch(aliases, "([a-zA-Z0-9.%-_]+):([a-zA-Z0-9%-_]+)") do
                    ngx.log(ngx.STDERR, k .. ":" .. v)
                    if k == host then
                        name = v
                        full = v
                    end
                end

                ngx.log(ngx.STDERR, "HERE!!!")
                ngx.log(ngx.STDERR, aliases)
                ngx.log(ngx.STDERR, name)

                -- get the first piece of the domain if no alias
                if not name then
                    name = host:match("([^.]+)." .. ops_domain .. "$")
                    full = host:match("^([a-zA-Z0-9.%-_]+)." .. ops_domain .. "$")
                end

                -- "%" escapes the - in the pattern.

                if host == 'localhost' then
                    name = host
                    full = host
                end

                ngx.var.ops_project_name = name

                if name == 'ops' then
                    return
                end

                local path = '/var/www/html/' .. name
                local env = dotenv(path .. '/.env')

                -- subdomains
                if name ~= full and env['OPS_PROJECT_ALLOW_SUBDOMAINS'] ~= "1" then
                    ngx.exit(404)
                    return
                end

                -- backend
                if env['OPS_PROJECT_BACKEND'] ~= nil and string.len(env['OPS_PROJECT_BACKEND']) > 0 then
                    ngx.var.ops_project_backend = env['OPS_PROJECT_BACKEND']
                end

                -- docroot
                if env['OPS_PROJECT_DOCROOT'] ~= nil then
                    ngx.var.ops_project_docroot = env['OPS_PROJECT_DOCROOT']
                end

                -- basic auth
                if env['OPS_PROJECT_BASIC_AUTH'] and env['OPS_PROJECT_BASIC_AUTH'] ~= "" and env['OPS_PROJECT_BASIC_AUTH'] ~= "0" then
                    ngx.var.ops_project_basic_auth = 'Password Protected Environment'
                    ngx.var.ops_project_basic_auth_file = path .. '/.htpasswd'

                    if env['OPS_PROJECT_BASIC_AUTH_FILE'] then
                        ngx.var.ops_project_basic_auth_file = path .. '/' .. env['OPS_PROJECT_BASIC_AUTH_FILE']
                    end
                end
            }

            auth_basic $ops_project_basic_auth;
            auth_basic_user_file $ops_project_basic_auth_file;

            #proxy_cache cache;
            #proxy_cache_valid 200 1d;
            #proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            #proxy_ignore_headers Expires Cache-Control;
            #proxy_cache_bypass $bypass_cache;
            #add_header X-Cache-Status $upstream_cache_status;

            proxy_pass_request_body on;
            proxy_pass_request_headers on;
            proxy_redirect off;
            proxy_pass_header Server;
            proxy_read_timeout 600s;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Ops-Project-Name $ops_project_name;
            proxy_set_header X-Ops-Project-Docroot $ops_project_docroot;
            proxy_set_header X-Ops-Project-Backend $ops_project_backend;
            proxy_pass http://$ops_project_backend$request_uri;
        }
    }
}
